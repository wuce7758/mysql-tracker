/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.jd.bdp.mysql.tracker.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventEntryAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventEntryAvro\",\"namespace\":\"com.jd.bdp.mysql.tracker.avro\",\"fields\":[{\"name\":\"dbName\",\"type\":\"string\"},{\"name\":\"schema\",\"type\":\"string\"},{\"name\":\"tableName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"dbOptTimestamp\",\"type\":\"long\"},{\"name\":\"dmlHBaseOptTimestamp\",\"type\":\"long\"},{\"name\":\"ddlSql\",\"type\":[\"string\",\"null\"]},{\"name\":\"error\",\"type\":[\"string\",\"null\"]},{\"name\":\"source\",\"type\":[{\"type\":\"map\",\"values\":[\"string\",\"null\"]},\"null\"]},{\"name\":\"current\",\"type\":[{\"type\":\"map\",\"values\":[\"string\",\"null\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence dbName;
  @Deprecated public java.lang.CharSequence schema;
  @Deprecated public java.lang.CharSequence tableName;
  @Deprecated public java.lang.CharSequence operation;
  @Deprecated public long dbOptTimestamp;
  @Deprecated public long dmlHBaseOptTimestamp;
  @Deprecated public java.lang.CharSequence ddlSql;
  @Deprecated public java.lang.CharSequence error;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current;

  /**
   * Default constructor.
   */
  public EventEntryAvro() {}

  /**
   * All-args constructor.
   */
  public EventEntryAvro(java.lang.CharSequence dbName, java.lang.CharSequence schema, java.lang.CharSequence tableName, java.lang.CharSequence operation, java.lang.Long dbOptTimestamp, java.lang.Long dmlHBaseOptTimestamp, java.lang.CharSequence ddlSql, java.lang.CharSequence error, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current) {
    this.dbName = dbName;
    this.schema = schema;
    this.tableName = tableName;
    this.operation = operation;
    this.dbOptTimestamp = dbOptTimestamp;
    this.dmlHBaseOptTimestamp = dmlHBaseOptTimestamp;
    this.ddlSql = ddlSql;
    this.error = error;
    this.source = source;
    this.current = current;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dbName;
    case 1: return schema;
    case 2: return tableName;
    case 3: return operation;
    case 4: return dbOptTimestamp;
    case 5: return dmlHBaseOptTimestamp;
    case 6: return ddlSql;
    case 7: return error;
    case 8: return source;
    case 9: return current;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dbName = (java.lang.CharSequence)value$; break;
    case 1: schema = (java.lang.CharSequence)value$; break;
    case 2: tableName = (java.lang.CharSequence)value$; break;
    case 3: operation = (java.lang.CharSequence)value$; break;
    case 4: dbOptTimestamp = (java.lang.Long)value$; break;
    case 5: dmlHBaseOptTimestamp = (java.lang.Long)value$; break;
    case 6: ddlSql = (java.lang.CharSequence)value$; break;
    case 7: error = (java.lang.CharSequence)value$; break;
    case 8: source = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 9: current = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dbName' field.
   */
  public java.lang.CharSequence getDbName() {
    return dbName;
  }

  /**
   * Sets the value of the 'dbName' field.
   * @param value the value to set.
   */
  public void setDbName(java.lang.CharSequence value) {
    this.dbName = value;
  }

  /**
   * Gets the value of the 'schema' field.
   */
  public java.lang.CharSequence getSchema$() {
    return schema;
  }

  /**
   * Sets the value of the 'schema' field.
   * @param value the value to set.
   */
  public void setSchema$(java.lang.CharSequence value) {
    this.schema = value;
  }

  /**
   * Gets the value of the 'tableName' field.
   */
  public java.lang.CharSequence getTableName() {
    return tableName;
  }

  /**
   * Sets the value of the 'tableName' field.
   * @param value the value to set.
   */
  public void setTableName(java.lang.CharSequence value) {
    this.tableName = value;
  }

  /**
   * Gets the value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'dbOptTimestamp' field.
   */
  public java.lang.Long getDbOptTimestamp() {
    return dbOptTimestamp;
  }

  /**
   * Sets the value of the 'dbOptTimestamp' field.
   * @param value the value to set.
   */
  public void setDbOptTimestamp(java.lang.Long value) {
    this.dbOptTimestamp = value;
  }

  /**
   * Gets the value of the 'dmlHBaseOptTimestamp' field.
   */
  public java.lang.Long getDmlHBaseOptTimestamp() {
    return dmlHBaseOptTimestamp;
  }

  /**
   * Sets the value of the 'dmlHBaseOptTimestamp' field.
   * @param value the value to set.
   */
  public void setDmlHBaseOptTimestamp(java.lang.Long value) {
    this.dmlHBaseOptTimestamp = value;
  }

  /**
   * Gets the value of the 'ddlSql' field.
   */
  public java.lang.CharSequence getDdlSql() {
    return ddlSql;
  }

  /**
   * Sets the value of the 'ddlSql' field.
   * @param value the value to set.
   */
  public void setDdlSql(java.lang.CharSequence value) {
    this.ddlSql = value;
  }

  /**
   * Gets the value of the 'error' field.
   */
  public java.lang.CharSequence getError() {
    return error;
  }

  /**
   * Sets the value of the 'error' field.
   * @param value the value to set.
   */
  public void setError(java.lang.CharSequence value) {
    this.error = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'current' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCurrent() {
    return current;
  }

  /**
   * Sets the value of the 'current' field.
   * @param value the value to set.
   */
  public void setCurrent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.current = value;
  }

  /** Creates a new EventEntryAvro RecordBuilder */
  public static com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder newBuilder() {
    return new com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder();
  }
  
  /** Creates a new EventEntryAvro RecordBuilder by copying an existing Builder */
  public static com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder newBuilder(com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder other) {
    return new com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder(other);
  }
  
  /** Creates a new EventEntryAvro RecordBuilder by copying an existing EventEntryAvro instance */
  public static com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder newBuilder(com.jd.bdp.mysql.tracker.avro.EventEntryAvro other) {
    return new com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for EventEntryAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventEntryAvro>
    implements org.apache.avro.data.RecordBuilder<EventEntryAvro> {

    private java.lang.CharSequence dbName;
    private java.lang.CharSequence schema;
    private java.lang.CharSequence tableName;
    private java.lang.CharSequence operation;
    private long dbOptTimestamp;
    private long dmlHBaseOptTimestamp;
    private java.lang.CharSequence ddlSql;
    private java.lang.CharSequence error;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current;

    /** Creates a new Builder */
    private Builder() {
      super(com.jd.bdp.mysql.tracker.avro.EventEntryAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing EventEntryAvro instance */
    private Builder(com.jd.bdp.mysql.tracker.avro.EventEntryAvro other) {
            super(com.jd.bdp.mysql.tracker.avro.EventEntryAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.dbName)) {
        this.dbName = data().deepCopy(fields()[0].schema(), other.dbName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.schema)) {
        this.schema = data().deepCopy(fields()[1].schema(), other.schema);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tableName)) {
        this.tableName = data().deepCopy(fields()[2].schema(), other.tableName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.operation)) {
        this.operation = data().deepCopy(fields()[3].schema(), other.operation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dbOptTimestamp)) {
        this.dbOptTimestamp = data().deepCopy(fields()[4].schema(), other.dbOptTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dmlHBaseOptTimestamp)) {
        this.dmlHBaseOptTimestamp = data().deepCopy(fields()[5].schema(), other.dmlHBaseOptTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ddlSql)) {
        this.ddlSql = data().deepCopy(fields()[6].schema(), other.ddlSql);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.error)) {
        this.error = data().deepCopy(fields()[7].schema(), other.error);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.source)) {
        this.source = data().deepCopy(fields()[8].schema(), other.source);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.current)) {
        this.current = data().deepCopy(fields()[9].schema(), other.current);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'dbName' field */
    public java.lang.CharSequence getDbName() {
      return dbName;
    }
    
    /** Sets the value of the 'dbName' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setDbName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dbName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dbName' field has been set */
    public boolean hasDbName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dbName' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearDbName() {
      dbName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'schema' field */
    public java.lang.CharSequence getSchema$() {
      return schema;
    }
    
    /** Sets the value of the 'schema' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setSchema$(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.schema = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'schema' field has been set */
    public boolean hasSchema$() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'schema' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearSchema$() {
      schema = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tableName' field */
    public java.lang.CharSequence getTableName() {
      return tableName;
    }
    
    /** Sets the value of the 'tableName' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setTableName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tableName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tableName' field has been set */
    public boolean hasTableName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tableName' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearTableName() {
      tableName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'operation' field */
    public java.lang.CharSequence getOperation() {
      return operation;
    }
    
    /** Sets the value of the 'operation' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.operation = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'operation' field has been set */
    public boolean hasOperation() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'operation' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'dbOptTimestamp' field */
    public java.lang.Long getDbOptTimestamp() {
      return dbOptTimestamp;
    }
    
    /** Sets the value of the 'dbOptTimestamp' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setDbOptTimestamp(long value) {
      validate(fields()[4], value);
      this.dbOptTimestamp = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'dbOptTimestamp' field has been set */
    public boolean hasDbOptTimestamp() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'dbOptTimestamp' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearDbOptTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'dmlHBaseOptTimestamp' field */
    public java.lang.Long getDmlHBaseOptTimestamp() {
      return dmlHBaseOptTimestamp;
    }
    
    /** Sets the value of the 'dmlHBaseOptTimestamp' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setDmlHBaseOptTimestamp(long value) {
      validate(fields()[5], value);
      this.dmlHBaseOptTimestamp = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'dmlHBaseOptTimestamp' field has been set */
    public boolean hasDmlHBaseOptTimestamp() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'dmlHBaseOptTimestamp' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearDmlHBaseOptTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'ddlSql' field */
    public java.lang.CharSequence getDdlSql() {
      return ddlSql;
    }
    
    /** Sets the value of the 'ddlSql' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setDdlSql(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.ddlSql = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'ddlSql' field has been set */
    public boolean hasDdlSql() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'ddlSql' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearDdlSql() {
      ddlSql = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'error' field */
    public java.lang.CharSequence getError() {
      return error;
    }
    
    /** Sets the value of the 'error' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setError(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.error = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'error' field has been set */
    public boolean hasError() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'error' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearError() {
      error = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setSource(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.source = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'source' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearSource() {
      source = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'current' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCurrent() {
      return current;
    }
    
    /** Sets the value of the 'current' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder setCurrent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.current = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'current' field has been set */
    public boolean hasCurrent() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'current' field */
    public com.jd.bdp.mysql.tracker.avro.EventEntryAvro.Builder clearCurrent() {
      current = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public EventEntryAvro build() {
      try {
        EventEntryAvro record = new EventEntryAvro();
        record.dbName = fieldSetFlags()[0] ? this.dbName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.schema = fieldSetFlags()[1] ? this.schema : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tableName = fieldSetFlags()[2] ? this.tableName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.operation = fieldSetFlags()[3] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dbOptTimestamp = fieldSetFlags()[4] ? this.dbOptTimestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.dmlHBaseOptTimestamp = fieldSetFlags()[5] ? this.dmlHBaseOptTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.ddlSql = fieldSetFlags()[6] ? this.ddlSql : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.error = fieldSetFlags()[7] ? this.error : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.source = fieldSetFlags()[8] ? this.source : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[8]);
        record.current = fieldSetFlags()[9] ? this.current : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
